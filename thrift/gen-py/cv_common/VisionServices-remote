#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from cv_common import VisionServices
from cv_common.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  VideoTagPredictRsp Predict(VideoPredictReq req)')
    print('  ImageSegRsp Seg(ImagePredictReq req)')
    print('  ImageDetRsp Detect(ImagePredictReq req)')
    print('  ImageFaceRsp Reg(ImagePredictReq req)')
    print('  ImageJointRsp Est(ImagePredictReq req)')
    print('  ImagesInpaintRsp Inpaint(ImagesInpaintReq req)')
    print('  ModelVersionRsp GetModelVersion(ModelVersionReq req)')
    print('  ImageJsonRsp RunJson(ImageJsonReq req)')
    print('  SpeechDetRsp SpeechDetect(SpeechPredictReq req)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = VisionServices.Client(protocol)
transport.open()

if cmd == 'Predict':
    if len(args) != 1:
        print('Predict requires 1 args')
        sys.exit(1)
    pp.pprint(client.Predict(eval(args[0]),))

elif cmd == 'Seg':
    if len(args) != 1:
        print('Seg requires 1 args')
        sys.exit(1)
    pp.pprint(client.Seg(eval(args[0]),))

elif cmd == 'Detect':
    if len(args) != 1:
        print('Detect requires 1 args')
        sys.exit(1)
    pp.pprint(client.Detect(eval(args[0]),))

elif cmd == 'Reg':
    if len(args) != 1:
        print('Reg requires 1 args')
        sys.exit(1)
    pp.pprint(client.Reg(eval(args[0]),))

elif cmd == 'Est':
    if len(args) != 1:
        print('Est requires 1 args')
        sys.exit(1)
    pp.pprint(client.Est(eval(args[0]),))

elif cmd == 'Inpaint':
    if len(args) != 1:
        print('Inpaint requires 1 args')
        sys.exit(1)
    pp.pprint(client.Inpaint(eval(args[0]),))

elif cmd == 'GetModelVersion':
    if len(args) != 1:
        print('GetModelVersion requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetModelVersion(eval(args[0]),))

elif cmd == 'RunJson':
    if len(args) != 1:
        print('RunJson requires 1 args')
        sys.exit(1)
    pp.pprint(client.RunJson(eval(args[0]),))

elif cmd == 'SpeechDetect':
    if len(args) != 1:
        print('SpeechDetect requires 1 args')
        sys.exit(1)
    pp.pprint(client.SpeechDetect(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
