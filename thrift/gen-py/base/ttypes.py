#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TrafficEnv(object):
    """
    Attributes:
     - Open
     - Env

    """


    def __init__(self, Open=False, Env="",):
        self.Open = Open
        self.Env = Env

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.Open = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Env = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrafficEnv')
        if self.Open is not None:
            oprot.writeFieldBegin('Open', TType.BOOL, 1)
            oprot.writeBool(self.Open)
            oprot.writeFieldEnd()
        if self.Env is not None:
            oprot.writeFieldBegin('Env', TType.STRING, 2)
            oprot.writeString(self.Env.encode('utf-8') if sys.version_info[0] == 2 else self.Env)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Base(object):
    """
    Attributes:
     - LogID
     - Caller
     - Addr
     - Client
     - trafficEnv
     - extra

    """


    def __init__(self, LogID="", Caller="", Addr="", Client="", trafficEnv=None, extra=None,):
        self.LogID = LogID
        self.Caller = Caller
        self.Addr = Addr
        self.Client = Client
        self.trafficEnv = trafficEnv
        self.extra = extra

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.LogID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Caller = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.Client = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.trafficEnv = TrafficEnv()
                    self.trafficEnv.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.extra = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.extra[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Base')
        if self.LogID is not None:
            oprot.writeFieldBegin('LogID', TType.STRING, 1)
            oprot.writeString(self.LogID.encode('utf-8') if sys.version_info[0] == 2 else self.LogID)
            oprot.writeFieldEnd()
        if self.Caller is not None:
            oprot.writeFieldBegin('Caller', TType.STRING, 2)
            oprot.writeString(self.Caller.encode('utf-8') if sys.version_info[0] == 2 else self.Caller)
            oprot.writeFieldEnd()
        if self.Addr is not None:
            oprot.writeFieldBegin('Addr', TType.STRING, 3)
            oprot.writeString(self.Addr.encode('utf-8') if sys.version_info[0] == 2 else self.Addr)
            oprot.writeFieldEnd()
        if self.Client is not None:
            oprot.writeFieldBegin('Client', TType.STRING, 4)
            oprot.writeString(self.Client.encode('utf-8') if sys.version_info[0] == 2 else self.Client)
            oprot.writeFieldEnd()
        if self.trafficEnv is not None:
            oprot.writeFieldBegin('trafficEnv', TType.STRUCT, 5)
            self.trafficEnv.write(oprot)
            oprot.writeFieldEnd()
        if self.extra is not None:
            oprot.writeFieldBegin('extra', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extra))
            for kiter7, viter8 in self.extra.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                oprot.writeString(viter8.encode('utf-8') if sys.version_info[0] == 2 else viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BaseResp(object):
    """
    Attributes:
     - StatusMessage
     - StatusCode

    """


    def __init__(self, StatusMessage="", StatusCode=0,):
        self.StatusMessage = StatusMessage
        self.StatusCode = StatusCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.StatusMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.StatusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BaseResp')
        if self.StatusMessage is not None:
            oprot.writeFieldBegin('StatusMessage', TType.STRING, 1)
            oprot.writeString(self.StatusMessage.encode('utf-8') if sys.version_info[0] == 2 else self.StatusMessage)
            oprot.writeFieldEnd()
        if self.StatusCode is not None:
            oprot.writeFieldBegin('StatusCode', TType.I32, 2)
            oprot.writeI32(self.StatusCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TrafficEnv)
TrafficEnv.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'Open', None, False, ),  # 1
    (2, TType.STRING, 'Env', 'UTF8', "", ),  # 2
)
all_structs.append(Base)
Base.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'LogID', 'UTF8', "", ),  # 1
    (2, TType.STRING, 'Caller', 'UTF8', "", ),  # 2
    (3, TType.STRING, 'Addr', 'UTF8', "", ),  # 3
    (4, TType.STRING, 'Client', 'UTF8', "", ),  # 4
    (5, TType.STRUCT, 'trafficEnv', [TrafficEnv, None], None, ),  # 5
    (6, TType.MAP, 'extra', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(BaseResp)
BaseResp.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'StatusMessage', 'UTF8', "", ),  # 1
    (2, TType.I32, 'StatusCode', None, 0, ),  # 2
)
fix_spec(all_structs)
del all_structs
